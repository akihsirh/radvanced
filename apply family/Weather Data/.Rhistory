expected_value
sample_size <- 10000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 10000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
for(loop in 1:5){
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
print
sample_size <- 100000
for(loop in 1:5){
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
print(expected_value)
}
MyFirstVector <- c(3,45,56,732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
MyFirstVector <- c(3l,45l,732l)
MyFirstVector <- c(3L,45L,732L)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
CVec <- c("A","b","123")
CVec
is.numeric(CVec)
is.character(CVec)
S1Vec <- c("a","g",7)
S1Vec
is.numeric(S1Vec)
is.character(S1Vec)
seq(1,15)
1:15
z<- seq(1,15,4)
z
rep1 <- rep(6,21)
rep1
repc <- rep("A",35)
repc
repv <- rep(c(3,4),10)
rep1 <- rep(6,21)repv
repv
z1 <- seq(20,35,6)
z1
z2 <- seq(20:35,40)
z2 <- seq(20:21)
z2
z2
z2 <- seq(20:21)
z2
z2 <- seq(20:22)
z2
z2 <- seq(20:23)
z2
z2 <- seq(20:30)
z2
MyFirstVector[1]
MyFirstVector[3]
z[-9]
z<- seq(1,15,4)
z
z<- seq(1,15)
z
z[-9]
z[-20]
z[20]
MyFirstVector[-1:-3]
MyFirstVector[1:3]
z[4:7]
z[c(8,11,12)]
z[c(-2,-5)]
z[-3:-6]
z[-1:1]
z[seq(2:5)]
z[seq(2,5)]
z[rep(3,5)]
z[0]
z[102]
z[-102]
zero <- z[0]
zero
sv1 <- seq(1:15)
sv2 <- seq(16:20)
svadd <- sv1 + sv2
svadd
svsub <- sv2 - sv1
svsub
#Vector Arithmatics
sv1 <- seq(1,15)
sv2 <- seq(16,20)
#Vector Addition
svadd <- sv1 + sv2
svadd
svsub <- sv2 - sv1
svsub
svsub1 <- sv1 - sv2
svsub1
svmul <- sv1 * sv2
svmul
svdiv <- sv1 /sv2
svdiv
svmod <- sv2 % sv1
svmod
sv3 <- seq(1,30)
sv4 <- sv2 + sv3
sv4
sv5 <- seq(1,19)
sv6 <- sv5 + sv3
sv5 <- seq(1,19)
sv6 <- sv5 + sv3
sv6
x <- rnorm(5)
x
x <- rnorm(5)
x
for(i in x){
print(i)
}
# programming generic loop
for(j in 1:5){
print(j)
}
# R specific programming loop
for(i in x){
print(i)
}
# programming generic loop
for(j in 1:5){
print(x[j])
}
N <- 100
r <- rnorm(N)
s <- rnorm(N)
# ------------------------------- vectorized ways -----------------
N <- 100
r <- rnorm(N)
s <- rnorm(N)
#devectorized multiplication
t <- rep(NA,N)
for(i in 1:N){
t[i] <- r[i] * s[i]
}
#vectorized multiplication
u <- r * s
?seq
z<- seq(1,15,4)
z
z1 <- seq(20,35,6)
z1
z2 <- seq(20:30)
z2
z3 <- seq(from=35, to = 55, length.out = 15)
z3
seqlen <- c("q", "w","e","r","t","y")
z4 <- seq(from=35, to = 55, along.with = seqlen)
z4
repseq1 <- rep(5:6,10)
repseq1
repseq1 <- rep(5:6,times = 10)
repseq1
repseq2 <- rep(5:6,each = 10)
repseq2
b <- sqrt(repseq1)
b
list_rl1$UnknownHours <- rl1_machine[is.na(rl1_machine$Utilization) , ]
source("MachineData.R")
#Take data for the machine RL1
summary(machineData)
rl1_machine <- machineData[machineData$Machine == "RL1" , ]
summary(rl1_machine)
rl1_machine$Machine <- factor(rl1_machine$Machine)
summary(rl1_machine)
#List wanted
#Character : Machine Name
#Vector: (min, mean and max) for the month. Utilization hours (excluding unknown hours)
#Logical: Utilization ever below 90 ?
#Vector: All hours where utilization is unknown
#DataFrame: For this machine
#Plot: For all machines
stats_util_rl1 <- c(min(rl1_machine$Utilization, na.rm = TRUE) ,
mean(rl1_machine$Utilization, na.rm = TRUE) ,
max(rl1_machine$Utilization, na.rm = TRUE))
under_90_util_rl1 <- as.logical(length(which(rl1_machine$Utilization < 0.90)))
list_rl1 <- list(unique(as.character(rl1_machine$Machine)) ,
stats_util_rl1 ,
under_90_util_rl1)
# name components of list
# 1. First way
names(list_rl1) <- c("Machine", "Stats", "LowThreshold")
#2. Second way
rm(list_rl1)
list_rl1 <- list(Machine = unique(as.character(rl1_machine$Machine)) ,
Stats = stats_util_rl1 ,
LowThreshold = under_90_util_rl1)
#Extracting components of a list
#1. [] -> will return the list
#2. [[]]-> will return the actual object
#3. $ -> same as [[]] but has more reader usability
list_rl1$UnknownHours <- rl1_machine[is.na(rl1_machine$Utilization) , ]
#head(rl1_machine,n=10)
#unique(as.character(rl1_machine$Machine))
#unique(as.character(machineData$Machine))
source("MachineData.R")
#Take data for the machine RL1
summary(machineData)
rl1_machine <- machineData[machineData$Machine == "RL1" , ]
summary(rl1_machine)
rl1_machine$Machine <- factor(rl1_machine$Machine)
summary(rl1_machine)
#List wanted
#Character : Machine Name
#Vector: (min, mean and max) for the month. Utilization hours (excluding unknown hours)
#Logical: Utilization ever below 90 ?
#Vector: All hours where utilization is unknown
#DataFrame: For this machine
#Plot: For all machines
stats_util_rl1 <- c(min(rl1_machine$Utilization, na.rm = TRUE) ,
mean(rl1_machine$Utilization, na.rm = TRUE) ,
max(rl1_machine$Utilization, na.rm = TRUE))
under_90_util_rl1 <- as.logical(length(which(rl1_machine$Utilization < 0.90)))
list_rl1 <- list(unique(as.character(rl1_machine$Machine)) ,
stats_util_rl1 ,
under_90_util_rl1)
# name components of list
# 1. First way
names(list_rl1) <- c("Machine", "Stats", "LowThreshold")
#2. Second way
rm(list_rl1)
list_rl1 <- list(Machine = unique(as.character(rl1_machine$Machine)) ,
Stats = stats_util_rl1 ,
LowThreshold = under_90_util_rl1)
#Extracting components of a list
#1. [] -> will return the list
#2. [[]]-> will return the actual object
#3. $ -> same as [[]] but has more reader usability
list_rl1$UnknownHours <- rl1_machine[is.na(rl1_machine$Utilization) , ]
#head(rl1_machine,n=10)
#unique(as.character(rl1_machine$Machine))
#unique(as.character(machineData$Machine))
setwd("C:/Git/R Programming Exercises/radvanced/lists")
getwd()
#Load data
machineData <- read.csv("Machine-Utilization.csv")
tail(machineData)
head(machineData)
str(machineData)
summary(machineData)
#Create a utilization column
machineData$Utilization <- 1 - machineData$Percent.Idle
head(machineData, 14)
#Handling date times in the dataset
machineData$PosixTime <- as.POSIXct(machineData$Timestamp ,
format="%d/%m/%Y %H:%M")
head(machineData, 12)
summary(machineData)
str(machineData)
#How to rearrange columns in the data frame
machineData$Timestamp <- NULL
machineData <- machineData[ , c(4,1,2,3)]
head(machineData, 10)
source("MachineData.R")
#Take data for the machine RL1
summary(machineData)
rl1_machine <- machineData[machineData$Machine == "RL1" , ]
summary(rl1_machine)
rl1_machine$Machine <- factor(rl1_machine$Machine)
summary(rl1_machine)
#List wanted
#Character : Machine Name
#Vector: (min, mean and max) for the month. Utilization hours (excluding unknown hours)
#Logical: Utilization ever below 90 ?
#Vector: All hours where utilization is unknown
#DataFrame: For this machine
#Plot: For all machines
stats_util_rl1 <- c(min(rl1_machine$Utilization, na.rm = TRUE) ,
mean(rl1_machine$Utilization, na.rm = TRUE) ,
max(rl1_machine$Utilization, na.rm = TRUE))
under_90_util_rl1 <- as.logical(length(which(rl1_machine$Utilization < 0.90)))
list_rl1 <- list(unique(as.character(rl1_machine$Machine)) ,
stats_util_rl1 ,
under_90_util_rl1)
# name components of list
# 1. First way
names(list_rl1) <- c("Machine", "Stats", "LowThreshold")
#2. Second way
rm(list_rl1)
list_rl1 <- list(Machine = unique(as.character(rl1_machine$Machine)) ,
Stats = stats_util_rl1 ,
LowThreshold = under_90_util_rl1)
#Extracting components of a list
#1. [] -> will return the list
#2. [[]]-> will return the actual object
#3. $ -> same as [[]] but has more reader usability
list_rl1$UnknownHours <- rl1_machine[is.na(rl1_machine$Utilization) , ]
#head(rl1_machine,n=10)
#unique(as.character(rl1_machine$Machine))
#unique(as.character(machineData$Machine))
list_rl1
list_rl1$UnknownHours <- rl1_machine[is.na(rl1_machine$Utilization) , "PosixTime"]
list_rl1
list_rl1[7]
list_rl1[7] <- "Seven Devils"
list_rl1
list_rl1[7] <- NULL
list_rl1
list_rl1[5] <- NULL
list_rl1[6] <- NULL
list_rl1
list_rl1[5] <- NULL
list_rl1
list$Data <- rl1_machine
list_rl1
list$Data <- rl1_machine
list_rl1$Data <- rl1_machine
summary(list_rl1)
str(list_rl1)
list_parent <- list(SomeCharacter = "A", SomeNumber = 1, SomeVector = c(1,2,3) ,
SomeSome = c("A","B","C"))
list_parent[1]
list_parent[1:3]
list_parent[-1]
list_parent[-2]
list_parent[-1]
list_parent[-2]
list_parent[-3]
list_parent[c("SomeCharacter","SomeSome")]
list_child <- list_parent[c("SomeCharacter","SomeSome")]
list_child[1:2]
list_child["SomeSome"]
#Creating the plot
library(ggplot2)
h <- ggplot(machineData)
str(list_rl1)
summary(list_rl1)
str(machineData)
h <- ggplot(machineData)
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 2)
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1.5)
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1.5) +
facet_grid(Machine~.)
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.)
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Blue" , linetype = 4 )
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Gray" , linetype = 4 )
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Yellow" , linetype = 4 )
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Magenta" , linetype = 4 )
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Silver" , linetype = 4 )
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Pink" , linetype = 4 )
h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Pink" ,
linetype = 5 )
list_rl1$Plot <- myplot
myplot <- h + geom_line(aes(x=PosixTime , y = Utilization , colour = Machine) ,
size = 1) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.9 , size = 1.2 , colour = "Pink" ,
linetype = 5 )
list_rl1$Plot <- myplot
list_rl1
setwd("C:/Git/R Programming Exercises/radvanced/apply family/Weather Data")
getwd()
